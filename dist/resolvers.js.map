{"version":3,"sources":["../src/resolvers.js"],"names":["resolvers","Query","getAllProducts","_","inStock","Product","find","$gt","getProduct","title","query","findOne","then","doc","ApolloError","getCart","username","user","Cart","getUsers","User","Mutation","createProduct","input","create","updateProduct","findOneAndUpdate","new","error","purchaseProduct","quantity","result","inventory_count","update","$inc","deleteProduct","deleteMany","deleteAll","remove","createUser","createCart","addToCart","productQuery","price","subTotal","$push","items","total","completeCart","cart","length","item"],"mappings":"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","file":"resolvers.js","sourcesContent":["import Product from './models/product';\r\nimport Cart from './models/cart';\r\nimport User from './models/user';\r\n\r\nimport { ApolloError } from 'apollo-server'\r\n\r\nexport const resolvers = {\r\n    Query: {\r\n        async getAllProducts(_, { inStock }) {\r\n            if (!inStock) {\r\n                return await Product.find()\r\n            } else {\r\n                return await Product.find({\r\n                    \"inventory_count\" : { $gt: 0 }\r\n                })\r\n            }\r\n            \r\n        },\r\n        async getProduct(_, { title }) {\r\n            var query = { title: title }\r\n            return await Product.findOne(query).then( (doc) => { //TODO: fix error with error\r\n                if (!doc) {\r\n                    throw new ApolloError(\"The product does not exist!\");\r\n                }\r\n                \r\n                return doc;\r\n            });\r\n        },\r\n        async getCart(_, { username }) {\r\n            var query = { user: username }\r\n            return await Cart.findOne(query).then( (doc) => {\r\n                if (!doc) {\r\n                    throw new ApolloError(`There is no cart for ${username}.`)\r\n                }\r\n                return doc;\r\n            });\r\n        },\r\n        async getUsers() {\r\n            return await User.find();\r\n        }\r\n    },\r\n    Mutation: {\r\n        async createProduct(_, { input }) {\r\n            return await Product.create(input);\r\n        },\r\n        async updateProduct(_, { title, input }) { \r\n            var query = { title: title };\r\n            return await Product.findOneAndUpdate(query, input, {new: true}, (error, doc) => {\r\n                if (error) {\r\n                    throw new ApolloError(\"There was an error updating the product!\");\r\n                }\r\n                if (!doc) {\r\n                    throw new ApolloError(\"That product does not exist!\");\r\n                }\r\n                else {\r\n                    return doc;\r\n                }\r\n            });\r\n        },\r\n        async purchaseProduct(_, { title, quantity }) {\r\n            var query = { title: title };\r\n            let result = await Product.findOne(query);\r\n            if (!result) {\r\n                throw new ApolloError(\"This item does not exist!\")\r\n            }\r\n            if (result.inventory_count <= 0) {\r\n                throw new ApolloError(\"This item is out of stock!\");\r\n            }\r\n            else {\r\n                return await Product.update(\r\n                    query,\r\n                    { \r\n                        $inc: { inventory_count: -quantity }\r\n                    },\r\n                );\r\n            }\r\n        },\r\n        async deleteProduct(_, { title }) {\r\n            var query = { title: title }\r\n            return await Product.deleteMany(query);\r\n        },\r\n        async deleteAll() {\r\n            return await Product.remove({});\r\n        },\r\n        async createUser(_, input) {\r\n            return await User.create(input);\r\n        },\r\n        async createCart(_, { username }) {\r\n            var query = { username: username }\r\n            let user =  await User.findOne(query);\r\n\r\n            if (!user) {\r\n                throw new ApolloError(\"No such user exists!\");\r\n            }\r\n            return await Cart.create({\r\n                user: username,\r\n            });\r\n        },\r\n        async addToCart(_, { username, input }) {\r\n            var productQuery = { title: input.title }\r\n            var { price, inventory_count } = await Product.findOne(productQuery);\r\n            var subTotal = price*input.quantity\r\n            var query = { user: username }\r\n            if (inventory_count <= 0) {\r\n                throw new ApolloError(\"This item is out of stock!\");\r\n            }\r\n\r\n            if (input.quantity > inventory_count) {\r\n                throw new ApolloError(`There is only ${inventory_count} left in stock!`);\r\n            }\r\n\r\n            return await Cart.findOneAndUpdate(\r\n                query,\r\n                {\r\n                    $push: { \r\n                        items: {\r\n                            title: input.title,\r\n                            quantity: input.quantity,\r\n                            subTotal: subTotal,\r\n                        }\r\n                    },\r\n                    $inc: { total: subTotal }\r\n                }\r\n            );\r\n        },\r\n        async completeCart(_, { username }) {\r\n            var query = { user: username }\r\n\r\n            let cart =  await Cart.findOne(query);\r\n            if (!cart) {\r\n                throw new ApolloError(\"Cart does not exist!\");\r\n            }\r\n            let items = cart.items;\r\n            if (!items.length) {\r\n                throw new ApolloError(\"Cannot complete an empty cart!\");\r\n            }\r\n            \r\n            for (let item of items) {\r\n                await Product.findOneAndUpdate(\r\n                    { title: item.title },\r\n                    {\r\n                        $inc: { inventory_count: -item.quantity }\r\n                    }\r\n                    \r\n                );\r\n            }\r\n\r\n            let total = cart.total;\r\n            cart.remove();\r\n\r\n            return `Cart completed successfully, total was: $${total}`\r\n        }\r\n    }\r\n}"]}